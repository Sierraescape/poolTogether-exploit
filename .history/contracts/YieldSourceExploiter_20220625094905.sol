// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.8.10;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { IYieldSource } from "./IYieldSource.sol";


//This contract will handle deposit and transfer (to require that the transfer only goes through if it leads to a very high share price)
//and then handle the actual iteration loop.
contract YieldSourceExploiter   {
    address internal owner;
    IYieldSource internal yieldSource;
    IERC20 internal aToken;
    IERC20 internal usdcToken;

    constructor(address _owner, address _yieldSource, address _aToken, address _usdcToken)   {
        owner = _owner;
        yieldSource = IYieldSource(_yieldSource);
        aToken = IERC20(_aToken);
        usdcToken = IERC20(_usdcToken);
    }

    modifier onlyOwner   {
        require(msg.sender == owner);
        _;
    }

    function firstDeposit(uint256 initDeposit) external onlyOwner   {
        //Deposit 1 wei to get 1 share

        //Deposit initDeposit to rack up share price

        //Require that share price is now very high--ensures that we don't waste init deposit
    }

    function iterateExploit(uint256 iterations) external onlyOwner   {
        //For numIterations:

        //Burn 1.99 shares

        //Mint 1 share
    }

    function withdrawFunds() external onlyOwner   {
        //Withdraw all funds
    }
}